{"version":3,"sources":["testfile.js"],"names":["EJS","window","EnlighterJS","Class","Implements","Options","options","language","theme","renderer","indent","forceTheme","rawButton","windowButton","infoButton","ampersandCleanup","rawcodeDoubleclick","originalCodeblock","container","isRendered","languageManager","rawContentContainer","output","textFilter","rawCode","initialize","opt","this","setOptions","LanguageManager","TextFilter","Renderer","InlineRenderer","BlockRenderer","Dom","id","enlight","enabled","rawLanguageName","get","setStyle","languageName","getLanguage","themeName","specialLines","SpecialLineHighlighter","Language","getRawCode","render","lineOffset","lineNumbers","addClass","toLowerCase","Element","inject","grab","text","styles","display","addEvent","toggleRawCode","bind","UI","Toolbar","dispose","reindent","code","replace","filterInput","newIndent","toInt","match","p1","offset","string","Array","length","join","show","getStyle","light","unlight","Tokenizer","Util"],"mappings":"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","file":"testfile.min.js","sourcesContent":["/*\n---\nname: EnlighterJS\ndescription: Syntax Highlighter based on the famous Lighter.js\n\nlicense: MIT-style X11 License\n\nauthors:\n  - Andi Dittrich\n  \nrequires:\n  - Core/1.4.5\n\nprovides: [EnlighterJS]\n...\n */\nvar EJS = window.EnlighterJS = new Class({\n\n\tImplements : Options,\n\n\toptions : {\n\t\tlanguage : 'generic',\n\t\ttheme : 'Enlighter',\n\t\trenderer: 'Block',\n\t\tindent : -1,\n\t\tforceTheme: false,\n\t\trawButton: true,\n\t\twindowButton: true,\n\t\tinfoButton: true,\n\t\tampersandCleanup: true,\n\t\trawcodeDoubleclick: false\n\t},\n\n\t// used renderer instance\n\trenderer: null,\n\t\n\t// used codeblock to highlight\n\toriginalCodeblock: null,\n\t\n\t// used container to store highlighted code\n\tcontainer: null,\n\t\n\t// lightning active ?\n\tisRendered: false,\n\t\n\t// language alias manager\n\tlanguageManager: null,\n\n\t// toggle raw code\n\trawContentContainer: null,\n\t\n\t// rendered output span/ou/ul container\n\toutput: null,\n\n    // input/output filter\n\ttextFilter: null,\n\n    // cached code input\n    rawCode: null,\n\n\t/**\n\t * @constructs\n\t * @param {Element} originalCodeblock An Element containing code to highlight\n\t * @param {Object} options The options object.\n\t * @param {Element} container (optional) The output container - if not defined, the output will be injected after the originalCodeblock\n\t */\n\tinitialize : function(originalCodeblock, opt, container) {\n\t\tthis.setOptions(opt);\n\t\t\n\t\t// create new language alias manager instance\n\t\tthis.languageManager = new EJS.LanguageManager(this.options);\n\n        // create new coe filter instance\n        this.textFilter = new EJS.TextFilter(this.options);\n\t\t\t\t\n\t\t// initialize renderer\n\t\tif (this.options.renderer == 'Inline'){\n\t\t\tthis.renderer = new EJS.Renderer.InlineRenderer(this.options, this.textFilter);\n\t\t}else{\n\t\t\tthis.renderer = new EJS.Renderer.BlockRenderer(this.options, this.textFilter);\n\t\t}\n\t\t\t\t\n\t\t// store codeblock element\n\t\tthis.originalCodeblock = EJS.Dom.id(originalCodeblock);\n\t\t\n\t\t// store/create container\n\t\tif (container){\n\t\t\tthis.container = EJS.Dom.id(container);\n\t\t}\n\t},\n\n\t/**\n\t * Takes a codeblock and highlights the code inside of it using the\n\t * stored parser/compilers. It reads the class name to figure out what\n\t * language and theme to use for highlighting.\n\t * \n\t * @return {EnlighterJS} The current EnlighterJS instance.\n\t */\n\tenlight : function(enabled){\n\t\t// show highlighted sourcecode ?\n\t\tif (enabled){\n\t\t\t// get element language\n\t\t\tvar rawLanguageName = this.originalCodeblock.get('data-enlighter-language');\n\t\t\t\n\t\t\t// ignore higlighting ?\n\t\t\tif (rawLanguageName == 'no-highlight'){\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\t// hide original codeblock\n\t\t\tthis.originalCodeblock.setStyle('display', 'none');\n\t\t\t\n\t\t\t// EnlighterJS exists so just toggle display.\n\t\t\tif (this.isRendered) {\t\t\t\t\n\t\t\t\tthis.container.setStyle('display', 'inherit');\n\t\t\t\treturn this;\n\t\t\t}\n\t\t\t\n\t\t\t// get language name - use alias manager to check language string and validate\n\t\t\tvar languageName = this.languageManager.getLanguage(rawLanguageName);\n\t\t\t\n\t\t\t// get theme name - use options as fallback\n\t\t\tvar themeName = (this.options.forceTheme ? null : this.originalCodeblock.get('data-enlighter-theme')) || this.options.theme || 'Enlighter';\n\t\t\t\n\t\t\t// special lines to highlight ?\n\t\t\tvar specialLines = new EJS.SpecialLineHighlighter(this.originalCodeblock.get('data-enlighter-highlight'), this.originalCodeblock.get('data-enlighter-lineoffset'));\n\t\t\t\n\t\t\t// Load language parser\n\t\t\tvar language = new EJS.Language[languageName](this.getRawCode(true));\n\t\t\t\n\t\t\t// compile tokens -> generate output\n\t\t\tthis.output = this.renderer.render(language, specialLines, {\n\t\t\t\tlineOffset: (this.originalCodeblock.get('data-enlighter-lineoffset') || null),\n\t\t\t\tlineNumbers: this.originalCodeblock.get('data-enlighter-linenumbers')\n\t\t\t});\n\t\t\t\n\t\t\t// set class and id attributes.\n\t\t\tthis.output.addClass(themeName.toLowerCase() + 'EnlighterJS').addClass('EnlighterJS');\t\t\n\t\n\t\t\t// add wrapper ?\n\t\t\tif (this.options.renderer == 'Block'){\n\t\t\t\t// grab content into specific container or after original code block ?\n\t\t\t\tif (!this.container) {\n\t\t\t\t\tthis.container = new EJS.Dom.Element('div');\n\t\t\t\t\t\n\t\t\t\t\t// put the highlighted code wrapper behind the original\t\n\t\t\t\t\tthis.container.inject(this.originalCodeblock, 'after');\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// add wrapper class\n\t\t\t\tthis.container.addClass('EnlighterJSWrapper').addClass(themeName.toLowerCase() + 'EnlighterJSWrapper');\n\t\t\t\t\n\t\t\t\t// add the highlighted code\n\t\t\t\tthis.container.grab(this.output);\n\t\t\t\t\n\t\t\t\t// create raw content container\n\t\t\t\tthis.rawContentContainer = new EJS.Dom.Element('pre', {\n\t\t\t\t\ttext: this.getRawCode(false),\n\t\t\t\t\tstyles: {\n\t\t\t\t\t\t'display': 'none'\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\t// add raw content container\n\t\t\t\tthis.container.grab(this.rawContentContainer);\n\t\t\t\t\n\t\t\t\t// show raw code on double-click ?\n\t\t\t\tif (this.options.rawcodeDoubleclick){\n\t\t\t\t\tthis.container.addEvent('dblclick', function(){\n\t\t\t\t\t\tthis.toggleRawCode();\n\t\t\t\t\t}.bind(this));\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// toolbar ?\n\t\t\t\tif (this.options.rawButton || this.options.windowButton || this.options.infoButton){\n\t\t\t\t\tthis.container.grab(new EJS.UI.Toolbar(this));\n\t\t\t\t}\n\n\t\t\t// normal handling\n\t\t\t}else{\n\t\t\t\t// grab content into specific container or after original code block ?\n\t\t\t\tif (this.container) {\n\t\t\t\t\tthis.container.grab(this.output);\n\t\t\t\t\t\n\t\t\t\t// just put the highlighted code behind the original\t\n\t\t\t\t}else{\n\t\t\t\t\tthis.output.inject(this.originalCodeblock, 'after');\n\t\t\t\t\tthis.container = this.output;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// set render flag\n\t\t\tthis.isRendered = true;\n\t\t\t\n\t\t// disable highlighting\t\n\t\t}else{\n\t\t\t// already highlighted ?\n\t\t\tif (this.isRendered) {\n\t\t\t\tthis.originalCodeblock.setStyle('display', 'inherit');\n\t\t\t\tthis.container.setStyle('display', 'none');\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n    /**\n     * Disable highlighting and remove generated DOM\n     */\n    dispose: function(){\n        // already highlighted ?\n        if (!this.isRendered) {\n            return;\n        }\n\n        // restore original codeblock\n        this.originalCodeblock.setStyle('display', null);\n\n        // hide highlighted code\n        this.container.setStyle('display', 'none');\n        this.rawContentContainer.setStyle('display', 'none');\n\n        // drop dom\n        this.container.dispose();\n        this.rawContentContainer.dispose();\n        this.container = null;\n        this.rawContentContainer = null;\n\n        // reset flag\n        this.isRendered = false;\n    },\n\t\n\t/**\n\t * Extracts the raw code from given codeblock\n\t * @return {String} The plain-text code (raw)\n\t */\n\tgetRawCode: function(reindent){\n\n        // cached version available ?\n        var code = this.rawCode;\n\n        if (code==null) {\n            // get the raw content\n            code = this.originalCodeblock.get('html');\n\n            // remove empty lines at the beginning+end of the codeblock\n            code = code.replace(/(^\\s*\\n|\\n\\s*$)/gi, '');\n\n            // apply input filter\n            code = this.textFilter.filterInput(code);\n\n            // cleanup ampersand ?\n            if (this.options.ampersandCleanup === true) {\n                code = code.replace(/&amp;/gim, '&');\n            }\n\n            // replace html escaped chars\n            code = code.replace(/&lt;/gim, '<').replace(/&gt;/gim, '>').replace(/&nbsp;/gim, ' ');\n\n            // cache it\n            this.rawCode = code;\n        }\n\n\t\t// replace tabs with spaces ?\n\t\tif (reindent === true){\n\t\t\t// get indent option value\n\t\t\tvar newIndent = this.options.indent.toInt();\n\t\t\t\n\t\t\t// re-indent code if specified\n\t\t\tif (newIndent > -1){\n\t\t\t\t// match all tabs\n\t\t\t\tcode = code.replace(/(\\t*)/gim, function(match, p1, offset, string){\n\t\t\t\t\t// replace n tabs with n*newIndent spaces\n\t\t\t\t\treturn (new Array(newIndent * p1.length + 1)).join(' ');\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn code;\n\t},\n\t\n\t/**\n\t * Hide/Show the RAW Code Container/Toggle Highlighted Code\n\t */\n\ttoggleRawCode: function(show){\n\t\t// initialization required!\n\t\tif (this.output == null){\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t// argument set ?\n\t\tif (typeof(show)!='boolean'){\n\t\t\tshow = (this.rawContentContainer.getStyle('display') == 'none');\n\t\t}\n\t\t\n\t\t// toggle container visibility\n\t\tif (show){\n\t\t\tthis.output.setStyle('display', 'none');\n\t\t\tthis.rawContentContainer.setStyle('display', 'block');\n\t\t}else{\n\t\t\tthis.output.setStyle('display', 'block');\n\t\t\tthis.rawContentContainer.setStyle('display', 'none');\n\t\t}\n\t},\n\n    /**\n     * Takes a codeblock and highlights the code inside. The original codeblock is set to invisible\n     * @DEPRECATED since v2.0 - this method will be removed in the future\n     *\n     * @return {EnlighterJS} The current EnlighterJS instance.\n     */\n    light : function(){\n        return this.enlight(true);\n    },\n\n    /**\n     * Unlights a codeblock by hiding the enlighter element if present and re-displaying the original code.\n     * @DEPRECATED since v2.0 - this method will be removed in the future\n     *\n     * @return {EnlighterJS} The current EnlighterJS instance.\n     */\n    unlight : function() {\n        return this.enlight(false);\n    }\n});\n\n// register namespaces\nEJS.Language = {};\nEJS.Tokenizer = {};\nEJS.Renderer = {};\nEJS.Util = {};\nEJS.UI = {};\n"]}